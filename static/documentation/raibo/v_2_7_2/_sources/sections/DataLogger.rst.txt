#############################
DataLogger
#############################
Raisin provides data logger, and exporting to csv. 

The global data logger in Raisin can be accessed via the external variable ``raisin::DataLogger::getInstance()``. However, in dynamically loaded libraries such as controllers and plugins, direct access to this variable is not possible, and these components should use their local ``dataLogger_``.

To start logging data, the initial step involves setting up a log file with the ``createALogFile`` function, typically called like this:

.. code-block:: c

 createALogFile(
    raisin::getResourceDirectory("raisin_data_logger"));

This function is already invoked within ``raisin_raibo2_node``, so it should not be called again. It sets up log files in the directory structure ``install/raisin_data_logger/share/raisin_data_logger/yyyy-mm-dd-hh-mm-ss/``.

For logging data, the process begins with initializing a data group by calling ``initializeAnotherDataGroup``. The ``ownersName`` argument is used as the CSV file name, and the ``args`` should be pairs of data names and variables (formatted as ``std::string data_name, DataType data_variable``. The supported DataType encompasses several options:

* **Eigen::Matrix<T, S1, S2>**: A matrix type from the Eigen library, useful for handling mathematical matrices with specific dimensions.
* **std::vector<T>**: A standard vector, which can contain elements of any type T.
* **raisim::VecDyn**: A dynamic vector type specific to the Raisim library, typically used in robotics and simulation.
* **raisim::Mat<n, m>**: A matrix type from the Raisim library, defined by its dimensions n and m.
* **T**: A generic placeholder representing a variable of any basic data type (e.g., int, float, double).

This method returns an ``int logIdx``, which is used for appending data to the log. The ``logIdx`` should correspond to the data group intended for data appending, and the args should match those used during initialization.

To complete the logging process and export the data to a CSV file, the following steps should be taken:

.. code-block:: c

  raisin::DataLogger::getInstance().flush();
  raisin::DataReader file(raisin::DataLogger::getInstance().getDataDirectory());
  file.exportToCsv();

These steps are also managed within ``raisin_raibo2_node``, so there is no need to repeat them in other parts of the application. This procedure results in the creation of CSV files at ``install/raisin_data_logger/share/raisin_data_logger/yyyy-mm-dd-hh-mm-ss/${data_name}_*.csv``.

For data visualization, you can use tools like PlotJuggler, as detailed in the operation manual.

For practical implementation examples, refer to the :download:`test_raisin_data_logger.cpp <../example/test_raisin_data_logger.cpp>`.

.. literalinclude:: ../example/test_raisin_data_logger.cpp
  :language: c

API
====

.. doxygenclass:: raisin::DataLogger
   :members:
   
.. doxygenclass:: raisin::DataReader
   :members: