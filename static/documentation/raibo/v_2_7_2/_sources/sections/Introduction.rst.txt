#############################
Introduction
#############################

Raisin is a control platform to manage legged robots. Its primary function is to facilitate the interaction between robots and their environment by handling sensor data and torque commands efficiently.

To control a robot, the robot should get observations via sensor measurement, and based on that, give torque command to a robot.

.. image:: ../image/raisin_diagram.png
  :alt: raisin_diagram
  :width: 600

Here’s how Raisin operates:

* **Data Flow Management**: At the core of Raisin's functionality is the ``worldHub_`` variable, which acts as a central hub for data flow. It collects sensor measurements from the real world and, based on these inputs, issues torque commands back to the robot.

* **Use of Plugins**: To enhance estimation of the world—including both the environment and the robot itself—Raisin supports the use of plugins. These can be employed simultaneously and are managed automatically by ``PluginManager``. Plugins help in refining the robot's perception and interaction with its surroundings.

* **Controller Interaction**: A controller within Raisin processes the estimated states provided by the plugins. It then formulates commands which are passed on to ``worldHub_``. These commands are subsequently executed by the real robot. The system ensures that only one controller is active at any given time, managed by the ``ControllerManager``.

* **Simulation Testing**: Before deployment in the real world, it's advisable to test the robot in a simulated environment managed by ``worldSim_``. This simulation acts as a proxy for the real world, allowing for safe and controlled testing of robot behaviors and commands. ``worldHub_`` will be visualized on port **8080**, and ``worldSim_`` will be visualized on port **7000**. **For simulating sensors, please ensure that you use raisimUnreal on port 7000.**

* **Cautions for Real-World Application**: While successful simulation tests are indicative of potential real-world performance, they do not guarantee identical outcomes in real environments. It's crucial to approach real-world deployment cautiously and make adjustments based on real-world feedback and conditions.
